## Probability 

What do we mean by "probability"?

It might seem like there's an easy answer to this question, but there's _at
least_ three senses of **probability**. 

These different senses are often employed in different contexts, because some
make more sense in some contexts relative to others

The three I'll cover are:

- The **classical view** of probability

- The **frequency view** of probability

- The **subjective view** of probability

---

### The classical view

The _classical view_ is often used in the context of games of chance like
roulette and lotteries 

We can sum it up as follows:

> If we have an (exhaustive) list of **events** that can be produce by some
> (exhaustive) list of equiprobable outcomes (the number of events and outcomes
> need not be the same), the **probability** of a particular event
> occurring is just **the proportion of outcomes that produce that event**.

To make it concrete we'll think about flipping coins. If we flip two coins the
possible outcomes that can occur are:

> HH, HT, TH, TT

---

### The classical view

If we're interested in a particular event—for example, the event of "obtaining
at least one head from two flips"—then we just count the number of outcomes
that produce that event.

> **HH**, **HT**, **TH**, TT 

Three out of four outcomes would produce the event of "at least one head", so
the probability is $\frac{3}{4}$ or 0.75

If you're viewing probability like this, it's very important to be clear about
what counts as a possible outcome. 

E.g., When playing the lottery, how many outcomes are there? 

- Two outcomes? You pick the correct numbers or you don't? So the
  probability of winning is $\frac{1}{2}$?

- Of course not! There's 45,057,474 possible outcomes, and 1 leads to you
  winning with 45,057,473 leading to you not winning!

---

### The frequency view 

When you take a frequency view of probability you're making a claim about **how
often, over some long period of time** some event occurs. 

- The frequency view is often the view that we take in science. If we wanted to
  assign a probability to the claim "drug X lowers depression", we can't just
  think of each possible outcome that **could** occur when people take Drug
  X and then count up how many lead to lower depression and how many did not.

- No way to make an exhaustive list of every possible outcome!

- But we can run an experiment where we give Drug X and see whether it lowers
  depression. And we can repeat this many times. Then we count up the
  proportion of experiments in which depression was lowered. 

- That is then the probability that Drug X lowers depression.

---

### The subjective view (credences)

Consider the following statement:

> The Australian cricket team will lose the upcoming test series against South Africa

There is a sense in which you can assign a probability to this

- But it isn't the classical kind—we can't just enumerate all the possible
  outcomes that lead to this event

- Nor is it the frequency kind—we can't repeat the 2022/2023 cricket tour over
  and over and see how often Australia lose.

When we talk about probability in this context we mean something like _degree of
belief_, _credence_, or _subjective probability_.

Probability in this context is the answer to the question "how sure are you
that the Australian cricket team will lose the upcoming test series against
South Africa?"

---

## Calculating with probability

The different views of probability have got to do with what the numbers
**mean**, but once we have the numbers there are no real disagreements about how
we do calculations with those numbers^[Probabilities don't always have to have
**numbers** attached. There is a sense in which something can be **more
probable** than something else without numbers being attached.]

**Some properties of probabilities** will help us to do calculations

When we attach numbers to probabilities those numbers must range from 0 to 1

- If an event has probability 0 then it is impossible

- If an event has probability 1 then it is guaranteed

These two simple rules can help us to check our calculations with
probabilities. If we get a value more than 1 or a value less than 0, then
something has gone wrong!

---

### The addition law

Whenever two events are _mutually exclusive_:

> The probability that at least one of them occurs is the **sum** of their
> individual probabilities

If we flip a coin, one of two things can happen. It can land Heads, or it can
land Tails. It can't land heads **and** tails (_mutually exclusive_), and one
of those things must happen (it's a list of all possible events)

- What's the probability that at least one of those events happens? Since
  one of those events must happen the probability must be 1

- But we can work it out from the individual probabilities

1. $\frac{1}{2}$ possible outcomes produces Heads—P(Heads) = 0.50

2. $\frac{1}{2}$ possible outcomes produces Tails—P(Tails) = 0.50

The probability of at least one of **Heads** or **Tails** occurring is 0.5 + 0.5 = 1

---

#### Mutually exclusive and non-mutually exclusive events

Consider a deck of cards:

1. What is the probability of pulling out a Spade or a Club?

2. What is the probability of pulling out a Spade or an Ace

In situation (1) the events are *mutually exclusive* or *disjoint*. A card
can't be a Spade **AND** a Club. It will either be a Space, a Club, or something
else.

The addition rule applies:

-  P(Spade) + P(Club) = Probability of selecting a spade or a club. 


In situation (2) the events are **not** mutually exclusive. A card **can** be both
a Spade and an Ace.

- So we need different rules

To make this clear, we'll take a look at an example

---

::::{.columns}

:::{.column width="50%"}
First, we can set how many of each colour we have.

```{ojs}
//| panel: input
//| echo: false
viewof blue2_ = Inputs.bind(
  Inputs.range([1, 30], { label: "Number of blue", step: 1, value: 15 }),
  viewof blue2
)


viewof red2_ = Inputs.bind(
  Inputs.range([1, 30], { label: "Number of red", step: 1, value: 15 }),
  viewof red2
)
```

Then we can set how many of each color will have white dots.

```{ojs}
//| echo: false
//| panel: input
viewof blue2_with_ = Inputs.bind(
  Inputs.range([1, blue2], { label: "Number of blue with dots", step: 1 }),
  viewof blue2_with
)
viewof red2_with_ = Inputs.bind(
  Inputs.range([1, red2], {
    label: "Number of red with dots",
    step: 1
  }),
  viewof red2_with
)
```

:::

:::{.column width="50%"}

```{ojs}
viewof plot2 = html`
<svg class="image" xmlns="http://www.w3.org/2000/svg" width="${
  (44 * 10) + 44
  }" height="${
  22 * Math.ceil((44 + 44 + 44) / 10) 
}">
${[
  full_grid
    .slice(0, red2_with)
    .map((pt) => circle(pt[0], pt[1], colors2.red.w[0], colors2.red.w[1])),
  full_grid
    .slice(red2_with, red2)
    .map((pt) => circle(pt[0], pt[1], colors2.red.n[0], colors2.red.n[1])),
  full_grid
    .slice(red2, red2 + blue2_with)
    .map((pt) => circle(pt[0], pt[1], colors2.blue.w[0], colors2.blue.w[1])),
  full_grid
    .slice(red2 + blue2_with, red2 + blue2)
    .map((pt) => circle(pt[0], pt[1], colors2.blue.n[0], colors2.blue.n[1]))
].join("")}
</svg>`
```

```{ojs}
//| panel: input
viewof show_double_count = Inputs.toggle({ label: "Show double counted", value: false })
```

:::
::::
We can now ask a question like: What is the probability of
selecting a circle that is Red **or** has a white dot?

```{ojs}
texmd`
$P(\mathrm{Red})$ = ${frac(red2/(red2 + blue2),red2 + blue2)} and
$P(\mathrm{Dot})$ = ${frac((red2_with + blue2_with) / (red2 + blue2), red2 + blue2)}.
We can't just add these two numbers, because we'll double count some 
of the circles. So after we add up the two numbers, we'll need to subtract
the number of double counted circles.
`
```

---

#### Not double counting

```{ojs}
texmd`
- The red circles with white dots get counted twice

- So we need to subtract this amount.

First we work out $P(\mathrm{Red})$ + $P(\mathrm{Dot})$.

- Using the numbers on the previous slide this gives us ${frac(((red2 + red2_with + blue2_with))/(blue2 + red2), blue2 + red2)}.

- Then we subtract ${frac(red2_with / (blue2 + red2), blue2 + red2)}. 

- This gives us $P(\mathrm{Red} \cup \mathrm{Dot})$ = ${frac((red2 + blue2_with)/(blue2 + red2), blue2 + red2)}.
`
```

*But if all that maths is too difficult, then we can just work out the probability by counting!
All we need to do is to count up all the circles that are either Red or have a dot. And
we just divide that by the total number of circles.*

```{ojs}
//| panel: input
viewof show_count = Inputs.toggle({ label: md`Show Red ∪ Dot`, value: false })
```



```{ojs}
colors2 = {
  let c = {
    "red" : { "w" : [ "red", "white" ], "n" : [ "red", "red" ] },
    "blue" : { "w" : [ "blue", "white" ], "n" : [ "blue", "blue" ] }
  }

  if(show_double_count) {
    c.red["n"] = ["white","white"]
    c.blue["w"] = ["white", "white"]
    c.blue["n"] = ["white", "white"]
  }
  if(show_count) {
    c.red["n"] = ["red", "red"]
    c.red["w"] = ["red","white"]
    c.blue["w"] = ["blue", "white"]
    c.blue["n"] = ["grey", "grey"]
  }


  return c

}

```



---

### Two or more events

In the last example we asked about the probability of selecting a **red
circle** or a **circle with a white dot**

In that example we're dealing with a single event where we could, for example, select:

- A red circle
- A circle with a white dot
- A blue circle

But sometimes we have to deal with multiple events.

We've already seen an example with **coin flipping**


---

### Two or more events

::::{.columns}
:::{.column width="50%"}
Let's say we flip a coin three times, we might want to work out the
probability of getting, for example, **Heads**, then **Tails**, and then
**Heads** again

- We can't just **add** up the probabilities, because we'd get 
$\frac{1}{2}$ + $\frac{1}{2}$ + $\frac{1}{2}$ = $\frac{3}{2}$. 

- Before we work it out mathematically, we'll work it out by counting
:::

:::{.column width="50%"}

```{ojs}
//| label: fig-sequences
//| fig-cap: Possible sequences after ${coins - 1} coin flips
viewof sequences = {
  const div = document.createElement("div");
  div.value = new vega.View(parsedSpec).initialize(div).run();
  return div;
}
```

```{ojs}
//| width: 100%
//| panel: input
viewof coins = htl.html`<input style="width:300px" type="range" id="coins" min="1" max="7" value="1" class="form-range">`

coins_label = htl.html`<label for="coins" class= "form-label" width="100%">Number of coin flips: ${
  coins - 1
}</label>`
```

:::

::::

If you don't want to count, and you just want to work it out mathematically, then
you can do this by multiplying together the probability for each of the events.
Doing this gives us the following:

$\frac{1}{2}$ × $\frac{1}{2}$ × $\frac{1}{2}$ = $\frac{1}{8}$

---

## Independence and non-independence

In the previous example, the two choices were **independent**

- This means that knowing whether you got Heads/Tails on the first flip didn't
  impact how you calculated the probability of getting Heads/Tails on the
  second flip

- We can calculate the probability of each event without considering
**anything about the other event**

But sometimes this isn't the case... sometimes knowing what happened on the
first event changes how to calculate the probability of the second event

Let us look at a simple example...

---

### Conditional probability

Let's say we're going to roll a die...

But instead of **just** rolling a die, we'll first **select** one of two dice.
The setup is as follows: 

1. First, pick either a **20-sided** dice (D-20) or a **6-sided** dice (D-6)

2. Second, roll the dice.

If I ask you, what is the probability of **rolling a 20**? The answer
you give will change **if I tell you which die you picked**

- For the coin flip, being told about the first flip doesn't change your
  calculation for the second

- For the dice roll, being told you picked the D-20 or D-6 **does** change your
  calculation

  - If you picked a D-20 then the probability that you rolled a 20 is $\frac{1}{20}$

  - If you picked a D-6 then the probability that you rolled a 20 is 0

---

## Working with conditional probabilities

- We often encounter conditional probabilities in everyday life where we use
  some bit of information to help us work out the probability of something.

- However, reasoning about conditional probabilities can be difficult and as a
  result people make a lot of mistakes when dealing with them.

The most common mistake that you'll encounter is the confusion being P(A|B) and
P(B|A).

Or as in the dice example:

- P(Roll 20 | D20), which is 1/20

- P(D20 | Roll 20), which is 1


---

## Working with conditional probabilities

The other common mistake is confusing the **conditional** probabilities
for the unconditional probabilities

That is, confusing, for example, P(A|B) and P(A)

Or in the dice example:

- P(D20 | Roll 20), which is 1

- P(D20) which is 0.5

There is a mathematical formula that relates all these quantities together.

This is known as **Bayes theorem**

- **Bayes theorem** allows us to update our probability calculations when we
  find out new information

For example, we can **update** our calculation for **rolling a 20** when we
find out that we selected a D-20

---

### Bayes theorem

**Bayes theorem** can help us think through conditional probabilities, because
sometimes conditional probabilities can be very unintuitive

Consider the following example:

#### Does a positive test mean somebody is sick?

There is a test for an illness. The test has the following properties:

1. About 80% of people that **have the illness** will test positive

2. Only ~5% of people **that don't have the illness** will test positive

Somebody, who may be sick or healthy, takes the test and tests positive...

Is that person sick?

---

#### Does a positive test mean somebody is sick?

::::{.columns}

:::{.column width="50%"}

Let's say a sample of 100 people

```{ojs}
viewof figure = html`
<svg class="image" xmlns="http://www.w3.org/2000/svg" width="420" height="${320}">
${[
  functions.full_grid
    .slice(0, _.sum(data.g.slice(0, 1)))
    .map((pt) =>
      functions.circle(pt[0], pt[1], data.colours[0][0], data.colours[0][1])
    ),
  functions.full_grid
    .slice(_.sum(data.g.slice(0, 1)), _.sum(data.g.slice(0, 2)))
    .map((pt) =>
      functions.circle(pt[0], pt[1], data.colours[1][0], data.colours[1][1])
    ),
  functions.full_grid
    .slice(_.sum(data.g.slice(0, 2)), _.sum(data.g.slice(0, 3)))
    .map((pt) =>
      functions.circle(pt[0], pt[1], data.colours[2][0], data.colours[2][1])
    ),
  functions.full_grid
    .slice(_.sum(data.g.slice(0, 3)), _.sum(data.g.slice(0, 4)))
    .map((pt) =>
      functions.circle(pt[0], pt[1], data.colours[3][0], data.colours[3][1])
    )
].join("")}
</svg>`
```


```{ojs}
//| panel: input
viewof positive_tests = Inputs.radio(
  new Map([
    ["All people", "all"],
    ["Only sick people", "sick"],
    ["Only healthy people", "health"],
    ["Only positive tests", "pos"]
  ]),
  { value: "all", label: "Show" }
)

```

```{ojs}
//| panel: input
viewof incidence = Inputs.radio(
  new Map([
    ["Common", "common"],
    ["Rare", "rare"]
  ]),
  { value: "rare", label: "Incidence" }
)
```
:::

:::{.column width="50%"}

```{ojs}
md`- ${data.g[0] + data.g[1]} sick people and ${functions.frac(
  data.conds.dot_red,
  data.g[0] + data.g[1]
)} or ${functions.round3(
  data.conds.dot_red * 100
)}% test **positive**`
```

```{ojs}
md`- ${data.g[2] + data.g[3]} healthy people, and only
 ${functions.frac(
  data.conds.dot_green,
  data.g[2] + data.g[3]
)} or ${functions.round3(
  data.conds.dot_green * 100
)}%  test **postive**.`
```

```{ojs}
md`

- There are ${data.g[1] + data.g[2]} people that test positive. 

  - ${functions.frac(
  data.g[1] / (data.g[1] + data.g[2]),
  data.g[1] + data.g[2]
)} or ${functions.round3(
  (data.g[1] / (data.g[1] + data.g[2])) * 100
)}% are sick

  - ${functions.frac(
    data.g[2] / (data.g[1] + data.g[2]),
    data.g[1] + data.g[2]
  )} or ${functions.round3((data.g[2] / (data.g[1] + data.g[2])) * 100)}%
  are healthy.

- A person testing **positive** is more likely to be ${
  data.g[1] / (data.g[1] + data.g[2]) > data.g[2] / (data.g[1] + data.g[2])
    ? "**sick**"
    : "**healthy!**"
}
`

```
:::

::::

---

#### Bayes theorem


We can work out the answer to the previous question just by counting the dots,
but we can also use Bayes theorem. 

Bayes theorem is given as:

$$P(A|B) = \frac{P(B|A) \times P(A)}{P(B)}$$

or 

$$P(🤮\ |\ ✅) = \frac{P(✅\ |\ 🤮) \times P(🤮)}{P(✅)}$$


Note that the crucial values here are P(🤮 ) and P(✅ ). These are sometimes
referred to as the prior probabilities or unconditional probabilities.

If you change the value of P(🤮 ) then you're changing how rare or common the
disease

And P(✅ ) is function of the P(✅| 🤮 ), P(✅| 😁 ), and P(🤮 )

---

#### Reasoning with Bayes theorem and conditional probabilities

- Reasoning about conditional probabilities like the testing example can be
difficult because people often forget about the P(🤮) and P(✅ ) bits.

- But we ignore P(🤮) and P(✅ ) we can see it's easy to make mistakes!

- Another common error is to confuse P(🤮|✅) and P(✅|🤮) or to think  
P(🤮|✅) = P(✅|🤮)

- But we saw from our earlier example that this isn't the case

  - You can think of the following example to help remind you of this. P(Lives
    in London | Is Boris Johnson) = 1, but P(Is Boris Johnson | Lives in
    London) = 1 in 9 Million

The media and (the scientific literature) is unfortunately littered with examples
of people getting muddled with conditional probabilities

And some of these confusions can be **dangerous**!

I'll just pick out two more examples to finish on...

---

### Does the Covid vaccine work?

You might have heard the following statistic in the media/online

> 50% of the people that die from Covid have been vaccinated

I've seen this stat on social media along with the claim that it *shows that the
Covid vaccine doesn't work*

Let's assume the stat is accurate. Does this mean that the vaccine
doesn't work?

---

### Does the Covid vaccine work?


::::{.columns}

:::{.column width="50%"}

- Green circles are the **vaccinated** and the orange circles are the
  **unvaccinated**

- A red dot means the person **died of covid**

```{ojs}
import {viewof figure as covid} from "@ljcolling/covid"
import {viewof short_description as covid_desc} from "@ljcolling/covid"
import {viewof positive_tests as covid_pos} from "@ljcolling/covid"
import {viewof incidence as vax_rate} from "@ljcolling/covid"
viewof covid
```

```{ojs}
//| panel: input
viewof covid_pos
viewof vax_rate
```

:::

:::{.column width="50%"}
```{ojs}
viewof covid_desc
```
:::

::::

In this example, we're keeping the vaccine efficacy constant (50% chance
of dying in the unvaccinated and 10% chance of dying in the vaccinated) and
we're only changing the **vaccination rate**

---

### Does the Covid vaccine work?

- The Covid vaccine example is an example of people confusing P(A|B) for
  P(B|A)

- What you want to know is $P(💀\ | 💉)$

- But on social media people were talking about $P(💉\ | 💀)$

A high value for $P(💉\ |💀)$ is consistent with a low
value for $P(💀\ |💉)$ if $P(💉)$ is high!

This is an example from social media, but some scientists
make this error too!

---


### Racial bias in police shootings

A few years ago Johnson *et al* published a study (in a very prestigious journal) 
about **racial bias** in **police** shooting.

Their finding can be summed up as follows:

> There is no racial bias in police shootings because people shot by police are
> more likely to be White than Black

This was picked up by the conservative media (e.g., Fox news) to show that 
movements like BLM were fighting against a problem that didn't exist!

But is the reasoning correct, and do the data show what Johnson *et al* claim?

**NO!**

---

### Racial bias in police shootings

Johnson *et al*, the journal reviewers, the journal editors
and the media were
looking at

- Whether P(Black|Shot) was larger than P(White|Shot) 

- Should've been looking at whether P(Shot|Black) was larger than P(Shot|White)


*This paper has now been retracted from the journal after a campaign that
started on Twitter, but the damage may already be done*

But let's step through it to find the errors...

---

### Racial bias in police shootings

Let's first look at the data Johnson *et al* present

```{r}
#| label: fig-1
#| fig-cap: Sample of police shootings. Pink circles correspond to White victims and Black circles to Black victims
#| out.width: 50%
knitr::include_graphics(here::here("images/slide1.png"))
```

@fig-1 shows the people shot by the police. 

The probability that a person is White (P(White|Shot)) is $\frac{20}{30}$ or `r round(20/30*100,2)`%

The probability that a person is Black (P(Black|Shot)) is $\frac{10}{30}$ or `r round(10/30*100,2)`% 

These are the two probabilities that Johnson *et al* looked at

<aside>These aren't the actual data. I've simplified it to
make things easier</aside>

---

### Racial bias in police shootings

::::{.columns}

:::{.column width="50%"}

- But let's add some additional data. These are the people that have had 
*encounters* with police that **didn't** end in a shooting

- Jonson *et al* didn't report this data, so I'm made this up for illustration

- We need this data because instead of looking at P(Black|Shot)/P(White|Shot) we
need to look at P(Shot|Black) and P(Shot|White)

:::

:::{.column width="50%"}
```{r}
#| label: fig-2
#| fig-cap: Sample of all people encountered by the police without getting shot. Pink circles correspond to White people and Black circles to Black people
#| out.width: 50%
knitr::include_graphics(here::here("images","slide2.png"))
```
:::

::::

---

### Racial bias in police shootings

::::{.columns}

:::{.column width="50%"}
Putting it all together we see this:

```{r}
#| label: fig-3
#| fig-cap: Sample of all people encountered by the police. Pink circles correspond to White people and Black circles to Black people. Red dots correspond to shooting victims.
#| out.width: 50%
knitr::include_graphics(here::here("images","slide3.png"))
```
:::


:::{.column width="50%"}
These are all the *encounters* that occurred between the police and civilians
including those that ended in the police shooting a civilian and those that did
not.

- If we focus just on the people who are Black then P(Shot|Black) = 50%

- If we focus just on the people who are White then P(Shot|White) = 25%

So the data presented by Johnson et al are consistent with a racial bias
in police shooting **assuming my assumptions are correct**


:::

::::

My **assumptions** could, however, be incorrect but Johnson et al
didn't collect this data because their faulty logic meant they didn't
realise it was important...

---

### Racial bias in police shootings

How important? Both these images are **consistent** with the
data reported by Johnson et al

::::{.columns}

:::{.column width="50%"}
```{r}
#| fig-align: center
knitr::include_graphics(here::here("images/slide3.png"))
```
:::


:::{.column width="50%"}
```{r}
#| fig-align: center
knitr::include_graphics(here::here("images/slide6.png"))
```
:::
::::

- Both figures above are consistent with P(Black|Shot) = `r round(10/30,2)` and
  P(White|Shot) = `r round(20/30,2)`

- But one gives P(Shot|Black) = `r round(10/20,2)` and P(Shot|White) = `r round(20/80,2)`

- And the other gives P(Shot|Black) = `r round(10/70,2)` and P(Shot|White) = `r round(20/30,2)`

Either one of these *could* be the case, but Johnson *et al*'s data
can't tell us which and therefore, they have no basis to support their claim

---

## Final thoughts


*I hope this serves as a sobering message for just how important research
methods (including probability theory) is in your training*

- You might one day be in the position to make policies for governments, so I
  hope you don't fall victim to faulty reasoning when you do!

- And that you know how to assess and interpret research correctly

---

## The exam

The final assessment of this course is the final exam

The final exam is worth 50% of your grade and it covers the material from the
12 weekly lectures

- Doesn't include material on R and RStudio

- Doesn't include material from the ethics lecture

- The exam will be **online** (This is specific to PAAS. Your other exams are
  probably in person)

---

#### **Format**

- **Mostly** multi-choice, with a few questions where you have to enter in
  *numbers*

- Some of the numeric questions will just involve finding the correct number in
  a table, but some will involve **calculating a number**

- A sample exam will be made available on Canvas in the next couple of days



<!-- Dependencies -->

```{ojs}
function circle(x, y, fill, stroke) {
  return `<circle cx="${x}" cy="${y}" r="20" stroke="none" fill="${fill}" stroke-width="0"></circle>
<circle cx="${x}" cy="${y}" r="10" stroke="${fill}" fill="${stroke}" stroke-width="0"></circle>`;
}
```

```{ojs}
full_grid = _.flatten(
  _.range(10).map((y) =>
    _.range(10)
      .map((x) => 44 * (x + 1))
      .map((x) => [x, 44 * (y + 1)])
  )
)
```

```{ojs}
function round3(x) {
  return Math.round(x * 1000) / 1000;
}
```

```{ojs}
//| eval: false
function getvalue(x) {
  if (x === "red") {
    return red;
  }

  if (x === "blue") {
    return blue;
  }

  if (x === "green") {
    return green;
  }
}

```


```{ojs}
viewof blue2 = Inputs.input(10)
```

```{ojs}
viewof red2 = Inputs.input(10)
```

```{ojs}
viewof blue2_with = Inputs.input(5)
```

```{ojs}
viewof red2_with = Inputs.input(5)
```


```{ojs}
function frac(decimal, den) {
  const n = Math.round(decimal * den);

  return md`${tex`\frac{${n}}{${den}}`}`;
}
```

```{ojs}
import { texmd } from "@kelleyvanevert/katex-within-markdown"
```

```{ojs}
parsedSpec = {
  return vega.parse(spec3);
}
```


```{ojs}
spec3 = {
  return {
    $schema: "https://vega.github.io/schema/vega/v5.0.json",
    padding: 0,
    width: 500,
    height: 100,
    layout: {
      padding: 0,
      columns: 1
    },
    marks: [
      {
        type: "group",
        encode: {
          update: {
            width: {
              value: 1000
            },
            height: {
              value: 130
            }
          }
        },
        data: [
          {
            name: "tree",
            values: coin_data,
            transform: [
              {
                type: "stratify",
                key: "id",
                parentKey: "parent"
              },
              {
                type: "tree",
                method: "tidy",
                size: [500, 200],
                as: ["x", "y", "depth", "children"]
              }
            ]
          },
          {
            name: "links",
            source: "tree",
            transform: [
              {
                type: "treelinks",
                key: "id"
              },
              {
                type: "linkpath",
                orient: "horizontal",
                shape: "line"
              }
            ]
          }
        ],
        scales: [
          {
            name: "color",
            domain: [0, 1, 2, 3, 4, 5],
            type: "sequential",
            range: "ramp"
          }
        ],
        marks: [
          {
            type: "path",
            from: {
              data: "links"
            },
            encode: {
              update: {
                path: {
                  field: "path"
                },
                stroke: {
                  value: "black"
                }
              }
            }
          },
          {
            type: "symbol",
            from: {
              data: "tree"
            },
            encode: {
              enter: {
                size: {
                  value: 50
                },
                stroke: {
                  value: "black"
                }
              },
              update: {
                x: {
                  field: "x"
                },
                y: {
                  field: "y"
                },
                fill: {
                  field: "color"
                }
              }
            }
          },
          {
            type: "text",
            from: {
              data: "tree"
            },
            encode: {
              enter: {
                text: {
                  field: "name"
                },
                fontSize: {
                  value: 0
                },
                baseline: {
                  value: "bottom"
                }
              },
              update: {
                x: {
                  field: "x"
                },
                y: {
                  field: "y"
                }
              }
            }
          }
        ]
      }
    ]
  };
}
```

```{ojs}
vega = require("https://cdn.jsdelivr.net/npm/vega@5/build/vega.js")
```

```{ojs}
coin_data = [
  { name: "START", id: 1, parent: "", color: "red" },
  ...d3.range(2, 2 ** coins).map((i) => {
    return {
      name: i % 2 ? "T" : "H",
      id: i,
      parent: Math.floor(i / 2)
    };
  })
].map((x) => {
  let colors = { H: "black", T: "white", START: "red" };
  x.color = colors[x.name];
  return x;
})
```


```{ojs}
functions = {
  return {
    circle: (x, y, fill, stroke) => {
      return `<circle cx="${x}" cy="${y}" r="14" stroke="none" fill="${fill}" stroke-width="0"></circle>
<circle cx="${x}" cy="${y}" r="5" stroke="${fill}" fill="${stroke}" stroke-width="0"></circle>`;
    },
    full_grid: _.flatten(
      _.range(10).map((y) =>
        _.range(10)
          .map((x) => 30 * (x + 1))
          .map((x) => [x, 30 * (y + 1)])
      )
    ),
    round3: (x) => Math.round(x * 1000) / 1000,
    frac: (decimal, den) => {
      const n = Math.round(decimal * den);
      return md`${tex`\frac{${n}}{${den}}`}`;
    }
  };
}
```

```{ojs}
data = {
  let proportions = incidence === "rare" ? [5, 95] : [80, 20];
  let percentages = incidence === "rare" ? [4 / 5, 1 / 20] : [8 / 10, 6 / 90];
  let g = [
    Math.round(proportions[0] * (1 - percentages[0])),
    Math.round(proportions[0] * percentages[0]),
    Math.round(proportions[1] * percentages[1]),
    Math.round(proportions[1] * (1 - percentages[1]))
  ];

  let all = [
    ["red", "red"],
    ["red", "black"],
    ["green", "black"],
    ["green", "green"]
  ];

  let pos = [
    ["white", "white"],
    ["red", "black"],
    ["green", "black"],
    ["white", "white"]
  ];

  let sick = [
    ["red", "red"],
    ["red", "black"],
    ["white", "white"],
    ["white", "white"]
  ]

  let health = [
    ["white", "white"],
    ["white", "white"],
    ["green", "black"],
    ["green", "green"]
  ];


  let colors = {"all" : all, "sick": sick, "pos": pos, "health": health}

  let conds = {
    red_dot: g[1] / (g[1] + g[2]),
    dot_red: g[1] / (g[1] + g[0]),
    red: (g[0] + g[1]) / _.sum(g),
    dot: (g[1] + g[2]) / _.sum(g),
    green: 1 - (g[0] + g[1]) / _.sum(g),
    dot_green: g[2] / (g[3] + g[2])
  };

  return {
    proportions: proportions,
    percentages: percentages,
    g: g,
    conds: conds,
    colours: colors[positive_tests]
  };
}
```
